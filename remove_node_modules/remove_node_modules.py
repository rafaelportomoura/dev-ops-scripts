
import sys
import os
from lib import *
from keyAndValue import *
from dotenv import dotenv_values
from file_stream import *
import os.path
from os import path


PROCESS_ENVIRONMENT = {**dotenv_values()}
HOME = os.environ['HOME']
ARG_PARSER = ArgvKeyValueParser(sys.argv)

ROOT_FOLDER = os.getcwd()
if 'INIT_PATH' in PROCESS_ENVIRONMENT:
    ROOT_FOLDER = PROCESS_ENVIRONMENT['INIT_PATH']


class RemoveNodeModules:
    def __init__(self, root_folder):
        self.root_folder = root_folder
        self.node_modules = []
        self.folders = [{'father': '', 'folder': root_folder}]

    def ls(self, _path):
        try:
            return os.listdir(_path)
        except:
            return []

    def findNodeModules(self, _path):
        print(_path)
        _path_entries = self.ls(_path)
        if 'node_modules' in _path_entries:
            print('NODE MODULES')
            self.node_modules.append(_path)

        print()

        for folder in _path_entries:
            if folder != 'node_modules':
                if path.isdir(f'{_path}\\{folder}'):
                    self.folders.append({'father': _path, 'folder': folder})

    def search(self):
        while self.folders.__len__() > 0:
            _path_to_search = self.folders.pop()
            if _path_to_search['father'] != '':
                self.findNodeModules(
                    f'{_path_to_search["father"]}\\{_path_to_search["folder"]}')
            else:
                self.findNodeModules(_path_to_search["folder"])

        self.remove_node_modules()

    def remove_dir(self, _path):
        print(_path)
        os.system(f'rm -rf {_path}\\node_modules')

    def remove_node_modules(self):
        print('NODE_MODULES')
        for node_path in self.node_modules:
            self.remove_dir(node_path)

    def write(self):
        file_stream = FileStream('../database', 'remove_node_modules')
        file_stream.write(self.node_modules)


remove_node_modules = RemoveNodeModules(ROOT_FOLDER)

remove_node_modules.search()
remove_node_modules.write()
